name: Check for base image updates

on:
  workflow_call:
    inputs:
      repo_owner:
        required: true
        type: string
      baseimage:
        required: true
        type: string
      basebranch:
        required: true
        type: string        
      app_name:
        required: true
        type: string
    secrets:
      repo_release_token:
        required: true

jobs:
  get-baseimage-version:
    runs-on: ubuntu-latest
    outputs:
      modified: ${{ steps.git-check.outputs.modified }}
    steps:
      - uses: actions/checkout@v2.4.0
        with:
          token: ${{ secrets.repo_release_token }}
      - name: Fetch release version
        run: |
          curl -sL https://api.github.com/repos/linuxserver/docker-baseimage-${{ inputs.baseimage }}/releases | \
          jq 'first(.[] | select(.target_commitish==${{ inputs.basebranch }}))' > release-versions/${{ inputs.baseimage }}-${{ inputs.basebranch }}.txt
      - name: Check for modified files
        id: git-check
        run: echo ::set-output name=modified::$([ -z "`git status --porcelain`" ] && echo "false" || echo "true")
      - name: Commit latest release version
        if: steps.git-check.outputs.modified == 'true'
        run: |
          git config --global user.name '${{ inputs.repo_owner }}'
          git config --global user.email '<>'
          git commit -am "New ${{ inputs.baseimage }} base image release version"
          git push

  release:
    runs-on: ubuntu-latest
    needs: get-baseimage-version
    if:  ${{ needs.get-baseimage-version.outputs.modified == 'true' }}
    steps:  
      - 
        name: Checkout
        uses: actions/checkout@v2.4.0
      - 
        name: Generate release tag
        id: gen_tags
        run: |
          IMAGE_VERSION=$(curl -s "https://api.github.com/repos/${{ inputs.repo_owner }}/docker-${{ inputs.app_name }}/releases/latest" | jq -r .tag_name)
          APP_VERSION=$(echo $IMAGE_VERSION | awk '{sub("-[^-]+$","")} 1')
          LS_VERSION=$(( $(echo $IMAGE_VERSION | awk -NF '-' '{print $NF}' | cut -c 3-8 | sed 's/^0*//')+1 ))
          RELEASE_TAG=$APP_VERSION-ls$(printf $LS_VERSION)
          echo "**** Setting release tag to $RELEASE_TAG ****"
          echo ::set-output name=tag_name::${RELEASE_TAG} 
      - 
        name: Do release
        uses: softprops/action-gh-release@v1
        with:
          body: "* Updated ${{ inputs.app_name }} with new ${{ inputs.baseimage }} ${{ inputs.basebranch }} version"
          token: ${{ secrets.repo_release_token }}
          tag_name: ${{ steps.gen_tags.outputs.tag_name }}

