name: Check for base image updates

on:
  workflow_call:
    inputs:
      repo_owner:
        required: true
        type: string
      app_name:
        required: true
        type: string        
      baseimage:
        required: true
        type: string
      basebranch:
        required: true
        type: string        
      prerelease:
        required: false
        type: boolean
      branch:
        required: false
        type: string
        default: main        
    secrets:
      repo_release_token:
        required: true

jobs:
  get-baseimage-version:
    runs-on: ubuntu-latest
    outputs:
      modified: ${{ steps.git-check.outputs.modified }}
    steps:
      - 
        name: Fetch release version
        id: git-check
        run: |
          BASE=$(curl -sL https://api.github.com/repos/linuxserver/docker-baseimage-${{ inputs.baseimage }}/releases)
          if [ -z "${BASE}" ] || [ "${BASE}" == "null" ]; then
              echo "*** Could not get valid base image version. Check inputs. ***"
              exit 1
          fi
          BASETIME=$(date -d $(echo $BASE | \
            jq -r 'first(.[] | select(.tag_name | match("(${{ inputs.basebranch }})-[0-9a-z]{8}") | .captures[].string) .published_at)') +%s)
          RELEASETIME=$(date -d $(curl -s "https://api.github.com/repos/${{ inputs.repo_owner }}/docker-${{ inputs.app_name }}/releases" | \
            jq -r 'first(.[].published_at)') +%s)
          if [ $BASETIME -le $RELEASETIME ]; then
              echo "*** Baseimage release is older than latest container release, skipping ***"
              echo "modified=false" >> $GITHUB_OUTPUT
          else
              echo "modified=true" >> $GITHUB_OUTPUT
          fi

  release:
    runs-on: ubuntu-latest
    needs: get-baseimage-version
    if:  ${{ needs.get-baseimage-version.outputs.modified == 'true' }}
    steps:  
      - 
        name: Checkout
        uses: actions/checkout@v4
      - 
        name: Generate release tag
        id: gen_tags
        run: |
          IMAGE_VERSION=$(curl -s "https://api.github.com/repos/${{ inputs.repo_owner }}/docker-${{ inputs.app_name }}/releases" | jq -r 'sort_by(.published_at) | .[-1].tag_name')
          APP_VERSION=$(echo $IMAGE_VERSION | awk '{sub("-[^-]+$","")} 1')
          LS_VERSION=$(( $(echo $IMAGE_VERSION | awk -NF '-' '{print $NF}' | cut -c 3-8 | sed 's/^0*//')+1 ))
          RELEASE_TAG=$APP_VERSION-ls$(printf $LS_VERSION)
          echo "**** Setting release tag to $RELEASE_TAG ****"
          echo "tag_name=${RELEASE_TAG}" >> $GITHUB_OUTPUT

          echo "**** Prerelease type is ${{ inputs.prerelease }}"
          if ${{ inputs.prerelease }} == 'true'; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
          fi
      - 
        name: Do release
        uses: softprops/action-gh-release@v2
        with:
          body: "* Updated ${{ inputs.app_name }} with new ${{ inputs.baseimage }} ${{ inputs.basebranch }} version"
          token: ${{ secrets.repo_release_token }}
          tag_name: ${{ steps.gen_tags.outputs.tag_name }}
          prerelease: ${{ steps.gen_tags.outputs.prerelease }}
          target_commitish: ${{ inputs.branch }}
