name: Build Image On Release

on:
  workflow_call:
    inputs:
      repo_owner:
        required: true
        type: string
      app_name:
        required: true
        type: string

jobs:
  bake:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2.4.0
      -  
        name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v3.6.0
        with:
          images: |
            ghcr.io/${{ inputs.repo_owner }}/${{ inputs.app_name }}
          labels: |
            org.opencontainers.image.title=${{ inputs.app_name }}
            org.opencontainers.image.description=${{ inputs.app_name }}
            org.opencontainers.image.vendor=${{ inputs.repo_owner }}
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.6.0
      -
        name: Login to GitHub Container Registry
        uses: docker/login-action@v1.10.0
        with:
          registry: ghcr.io
          username: ${{ inputs.repo_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - 
        name: Generate build date
        id: gen_date
        run: |
          BUILD_DATE=$(date '+%Y-%m-%dT%H:%M:%S%:z')
          echo "**** Setting build date to $BUILD_DATE ****"
          echo ::set-output name=build_date::${BUILD_DATE}
      - 
        name: Generate release version
        id: gen_release
        run: |
          if [ -z ${{ github.event.release.tag_name }} ]; then
            IMAGE_VERSION=$(curl -s "https://api.github.com/repos/${{ inputs.repo_owner }}/docker-${{ inputs.app_name }}/releases/latest" | jq -r .tag_name)
          else
            IMAGE_VERSION=${{ github.event.release.tag_name }}
          fi
          echo "**** Setting release tag to $IMAGE_VERSION ****"
          echo ::set-output name=tag_name::${IMAGE_VERSION}
      -
        name: Build and push
        uses: docker/bake-action@v1.6.0
        with:
          files: |
            ./docker-bake.hcl
            ${{ steps.docker_meta.outputs.bake-file }}
          set: |
            image.args.BUILD_DATE=${{ steps.gen_date.outputs.build_date }}
            image.args.VERSION=${IMAGE_VERSION}
          targets: image-all
          push: true
      -
        name: Push to Scarf
        id: push_scarf
        run: |
          PACKAGE_UUID=$(curl -X GET -H "Authorization: Bearer ${SCARF_TOKEN}" https://scarf.sh/api/v1/organizations/linuxserver-ci/packages | jq -r '.[] | select(.name=="${{ inputs.repo_owner }}/${{ inputs.app_name }}") | .uuid')
          if [ -z "${PACKAGE_UUID}" ]; then
            echo "Adding package to Scarf.sh"
            PACKAGE_UUID=$(curl -sX POST https://scarf.sh/api/v1/linuxserver-ci/packages \
              -H "Authorization: Bearer ${SCARF_TOKEN}" \
              -H "Content-Type: application/json" \
              -d '{"name":"${{ inputs.repo_owner }}/${{ inputs.app_name }}",\
                    "shortDescription":"example description",\
                    "libraryType":"docker",\
                    "website":"https://github.com/${{ inputs.repo_owner }}/docker-${{ inputs.app_name }}",\
                    "backendUrl":"https://ghcr.io/${{ inputs.repo_owner }}/${{ inputs.app_name }}",\
                    "publicUrl":"https://lscr.io/${{ inputs.repo_owner }}/${{ inputs.app_name }}"}' \
              | jq -r .uuid)
          else
            echo "Package already exists on Scarf.sh"
          fi